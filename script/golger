#!/usr/bin/perl

use strict;
use warnings;

use URI::Escape;
use AnyEvent::WebSocket::Client;
use Getopt::Long::Descriptive;
use Golger;

my $default_config_file;
if (defined $ENV{GOLGER_CONFIG_FILE}) {
	$default_config_file = $ENV{GOLGER_CONFIG_FILE};
} else {
	for my $f (glob('~/.golger.conf'), '/etc/golger.conf') {
		if (-f $f) {
			$default_config_file = $f;
			last
		}
	}
}

my ($opt, $usage) = describe_options(
	"%c %o [host] [service]",
	[ 'server|s=s', 'Riemann server to subscribe to' ],
	[ 'query|q=s', 'Riemann Query (see https://github.com/aphyr/riemann/blob/master/test/riemann/query_test.clj)' ],
	[ 'host|H=s', 'Host to query (will be ANDed to query)' ],
	[ 'service|S=s', 'Service to query (will be ANDed to query)' ],
	[ 'help|h', 'Print help' ],
	[ 'debug|d', 'Toggle debugging' ],
	[ 'configfile|c=s', 'Path to configfile', { default => $default_config_file } ],
);

if ($opt -> help) {
	print $usage -> text;
	exit 0;
}

my @query;

if (defined $opt->configfile) {
	if (-f $opt->configfile) {
		require Config::Any;
		my $cfgfile = Config::Any -> load_files (
			{
				files => [$opt->configfile],
				use_ext => 1,
				filter  => \&merge_config,
				flatten_to_hash => 1,
			}
		);
		}
}

my $server;
sub merge_config {
	while (my ($k, $v) = each %$_) {
		if ($k eq "server") {
			warn "setting `$k=$v` from configfile `".$opt->configfile."`\n" if $opt -> debug;
			$server = $v;
		} else {
			warn "ignored key `$k` from configfile `".$opt->configfile."`\n";
		}
	}
}
if (defined $opt->server) {
	$server = $opt->server
}

if (defined $opt->host) {
	push @query, 'host = "'.$opt->host.'"';
}
if (defined $opt->service) {
	push @query, 'service = "'.$opt->service.'"';
}
if (defined $opt->query) {
	push @query, $opt->query;
}

# treat ARGV as (<host>, [service])
my $na = scalar @ARGV;
if ($na > 2) {
	warn "error in arg list";
	exit 2;
}
if ($na == 1) {
	push @query, 'host = "'.$ARGV[0].'"';
} elsif ($na == 2) {
	push @query, 'service = "'.$ARGV[1].'"';
}

if (scalar @query == 0) {
	warn "empty query\n";
	print $usage -> text;
	exit 3;
}

my $query = uri_escape(join " and ", @query);

my $connect_info = 'ws://'.$server."/index?subscribe=true&query=${query}";
warn "Opening `$connect_info`\n" if  $opt->debug;

Golger::connect ($connect_info);

=head1 NAME

golger - riemann log cat from the shell

=head1 DESCRIPTION

This cli tool will subscribe to a riemann websocket and dump events to the console.

=head1 SYNOPSIS

Dump sshd logs from node01:

    golger node01 sshd

Dump all events from node01:

    golger node01

Full query:

    golger -q 'host = "node01" and tagged "syslog"'

Explicit server:

    golger -s myriemann:5556 -q 'state != "ok"'

Using server defined in configfile:

    golger -c /etc/golger.conf ...

Again but using environment variable in b*sh:

    GOLGER_CONFIG_FILE=/etc/golger.yaml golger node01

Using explicit host/service lookup:

    golger -H node02 -S httpd

Help:

    golger -h

=cut

